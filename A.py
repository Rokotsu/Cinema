import os

EXCLUDED_DIRS = {".venv", ".git", ".idea", ".pytest_cache"}  # Исключённые папки

def is_autogenerated(filename):
    """
    Проверяет, является ли файл автоматически сгенерированным.
    Например, файлы с 'activate_this' в названии.
    """
    return 'activate_this' in filename

def generate_tree(dir_path, prefix=""):
    """
    Генерирует строку с деревом файлов и папок проекта, исключая системные директории.
    """
    tree_str = ""
    try:
        entries = sorted(os.listdir(dir_path))
    except Exception as e:
        return f"{prefix}[Ошибка доступа: {e}]\n"

    # Исключаем системные папки
    entries = [entry for entry in entries if entry not in EXCLUDED_DIRS]
    entries_count = len(entries)

    for index, entry in enumerate(entries):
        full_path = os.path.join(dir_path, entry)
        if index == entries_count - 1:
            tree_str += prefix + "└── " + entry + "\n"
            sub_prefix = prefix + "    "
        else:
            tree_str += prefix + "├── " + entry + "\n"
            sub_prefix = prefix + "│   "
        if os.path.isdir(full_path):
            tree_str += generate_tree(full_path, sub_prefix)
    return tree_str

def main():
    # Определяем базовую директорию (где находится этот скрипт)
    base_dir = os.path.abspath(os.path.dirname(__file__))
    output_file = os.path.join(base_dir, "combined_code.txt")
    separator = "-" * 94  # Разделительная линия

    with open(output_file, "w", encoding="utf-8") as outfile:
        # Записываем дерево проекта
        outfile.write("Проектное дерево:\n")
        tree = generate_tree(base_dir)
        outfile.write(tree + "\n")
        outfile.write(separator + "\n\n")

        # Рекурсивно обходим базовую директорию и подпапки, исключая нежелательные каталоги
        for root, dirs, files in os.walk(base_dir):
            # Исключаем нежелательные папки
            dirs[:] = [d for d in dirs if d not in EXCLUDED_DIRS]

            for file in files:
                if file.endswith(".py") and not is_autogenerated(file):
                    file_path = os.path.join(root, file)
                    # Получаем относительный путь от базовой директории
                    rel_path = os.path.relpath(file_path, base_dir)

                    outfile.write(f"Файл: {rel_path}\n")
                    outfile.write(separator + "\n")

                    try:
                        with open(file_path, "r", encoding="utf-8") as infile:
                            code = infile.read()
                            outfile.write(code + "\n")
                    except Exception as e:
                        outfile.write(f"Ошибка чтения файла: {e}\n")

                    outfile.write(separator + "\n\n")

if __name__ == "__main__":
    main()
